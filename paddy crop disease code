import tkinter as tk
from tkinter import filedialog, Label, Button
from PIL import Image, ImageTk
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# Load the trained model
model = load_model(r'C:\Users\User\OneDrive\Documents\model.h5')

# Check the model's expected input shape
print("Model Input Shape:", model.input_shape)

# Class labels (modify based on your model)
class_labels = [
    'Bacterial Leaf Blight',
    'Blast Disease',
    'Brown Spot',
    'Healthy Leaf'
]

# Function to preprocess the image and make predictions
def predict_disease(image_path):
    try:
        # Load and preprocess the image to match model's input shape
        input_size = model.input_shape[1:3]  # Get expected width and height
        img = image.load_img(image_path, target_size=input_size)  # Resize to match input size
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0  # Normalize the image
        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction, axis=1)[0]
        confidence = np.max(prediction) * 100
        return class_labels[predicted_class], confidence
    except Exception as e:
        return f"Error: {str(e)}", 0

# Function to open and process the image file
def open_image():
    global img_label
    file_path = filedialog.askopenfilename(filetypes=[("Image files", ".jpg;.jpeg;*.png")])
    if file_path:
        # Display the selected image
        img = Image.open(file_path)
        img = img.resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        img_label.config(image=img_tk)
        img_label.image = img_tk

        # Predict disease
        result, confidence = predict_disease(file_path)
        result_label.config(text=f"Disease: {result}")
        confidence_label.config(text=f"Confidence: {confidence:.2f}%")

# Create the GUI application
root = tk.Tk()
root.title("Paddy Crop Disease Detection")
root.geometry("400x500")
# Create a CNN model
#model = Sequential([
   # Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
   # MaxPooling2D((2, 2)),
   # Conv2D(64, (3, 3), activation='relu'),
   # MaxPooling2D((2, 2)),
   # Flatten(),
   # Dense(128, activation='relu'),
   # Dropout(0.5),
   # Dense(4, activation='softmax')  # 4 classes for paddy leaf diseases
#])
# Title Label
title_label = Label(root, text="Paddy Crop Disease Detection", font=("Arial", 18, "bold"))
title_label.pack(pady=10)

# Image display
img_label = Label(root, text="No Image Selected", width=25, height=10, bg="gray")
img_label.pack(pady=10)

# Buttons
open_button = Button(root, text="Upload Paddy Leaf Image", command=open_image, font=("Arial", 14))
open_button.pack(pady=10)

# Result Labels
result_label = Label(root, text="Disease: ", font=("Arial", 14))
result_label.pack(pady=10)
confidence_label = Label(root, text="Confidence: ", font=("Arial", 14))
confidence_label.pack(pady=10)

# Run the application
root.mainloop()
